# Dump mpfs_cmd.mk based on project dependencies
from pathlib import Path


def get_counts_in_dirs(parent_path: Path, record_list: list):
    dir_list = list(filter(lambda p: p.is_dir(), parent_path.iterdir()))
    file_list = list(filter(lambda p: p.is_file(), parent_path.iterdir()))
    record_list.append((parent_path, len(dir_list), len(file_list)))
    for p in dir_list:
        get_counts_in_dirs(p, record_list)


def get_upload_cmds(local_dirs: list, relative_path: Path, file_regex="^\\w+\\.py$$"):
    tp_mkdir = "md /{0}"
    tp_put_files = 'cd /{0};lcd \\"$(PWD)/{1}\\";mput {2}'
    tp_rm = "cd /{0};mrm {1};cd /{0}/..;rm /{0}"
    records_mkdir = []
    records_put_files = []
    records_rm = []
    top = Path(".")
    for ld, dir_count, file_count in local_dirs:
        ld_rp = ld.relative_to(relative_path)
        # records_mkdir
        if not ld_rp == top:
            records_mkdir.append(tp_mkdir.format(ld_rp))
        # records_put_files
        if file_count > 0:
            records_put_files.append(
                tp_put_files.format(ld_rp, ld.relative_to(relative_path.parent), file_regex)
            )
    # records_rm
    for ld, dir_count, file_count in reversed(local_dirs):
        ld_rp = ld.relative_to(relative_path)
        if ld_rp == top:
            records_rm.append("cd /{0};mrm {1}".format(ld_rp, file_regex))
        else:
            records_rm.append(tp_rm.format(ld_rp, file_regex))
    return (";".join(records_mkdir), ";".join(records_put_files), ";".join(records_rm))


def generate_cmds_for_upload(path: Path, relative: Path, file_regex="^\\w+\\.py$$"):
    record_list = []
    get_counts_in_dirs(path, record_list)
    return get_upload_cmds(record_list, relative, file_regex)


TEMPLATE = """\
# This file is generated by tools/dump_mk.py
fn_mpfs=mpfshell --reset -n -c  ${{1}}
# mpfshell commands
{commands}"""

# ===

path_here = Path(__file__).parent
path_project = path_here.parent
path_src = path_project.joinpath("mpy_env")
path_tests = path_project.joinpath("tests")
path_examples = path_project.joinpath("examples")

# command map
mk_vars = {}

cmds = generate_cmds_for_upload(path_src, path_project)
mk_vars["mpy_mk_src_dirs"] = cmds[0]
mk_vars["mpy_put_src_files"] = cmds[1]
mk_vars["mpy_rm_src"] = cmds[2]

cmds = generate_cmds_for_upload(path_tests, path_tests.parent)
mk_vars["mpy_mk_tests_dirs"] = cmds[0]
mk_vars["mpy_put_tests_files"] = cmds[1]
mk_vars["mpy_rm_tests"] = cmds[2]

cmds = generate_cmds_for_upload(
    path_examples, path_examples, file_regex="^\w+\.(py|json)$$"
)
mk_vars["mpy_mk_examples_dirs"] = cmds[0]
mk_vars["mpy_put_examples_files"] = cmds[1]
mk_vars["mpy_rm_examples"] = cmds[2]

commands = ""
for item in mk_vars.items():
    commands += "%s:=%s\n" % item

output = TEMPLATE.format(commands=commands)
with path_project.joinpath("m_mpfs_cmd.mk").open("w") as fp:
    fp.write(output)
print("'%s' is generated." % fp.name)
